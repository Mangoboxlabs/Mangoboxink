{
  "source": {
    "hash": "0x98f76a1959f85fa33e9e86dc60800ad78a9ba9f0826148c50d64fc309cc9a2fa",
    "language": "ink! 3.0.0-rc5",
    "compiler": "rustc 1.61.0-nightly"
  },
  "contract": {
    "name": "MBERC20PaymentTerminal",
    "version": "3.0.0-rc5",
    "authors": [
      "Parity Technologies <admin@parity.io>"
    ]
  },
  "V1": {
    "spec": {
      "constructors": [
        {
          "args": [
            {
              "name": "_projects",
              "type": {
                "displayName": [
                  "AccountId"
                ],
                "type": 9
              }
            },
            {
              "name": "_directory",
              "type": {
                "displayName": [
                  "AccountId"
                ],
                "type": 9
              }
            },
            {
              "name": "_splitsStore",
              "type": {
                "displayName": [
                  "AccountId"
                ],
                "type": 9
              }
            },
            {
              "name": "_prices",
              "type": {
                "displayName": [
                  "AccountId"
                ],
                "type": 9
              }
            },
            {
              "name": "_store",
              "type": {
                "displayName": [
                  "AccountId"
                ],
                "type": 9
              }
            },
            {
              "name": "_token",
              "type": {
                "displayName": [
                  "AccountId"
                ],
                "type": 9
              }
            }
          ],
          "docs": [],
          "name": [
            "new"
          ],
          "selector": "0x9bae9d5e"
        }
      ],
      "docs": [],
      "events": [],
      "messages": [
        {
          "args": [
            {
              "name": "_projectId",
              "type": {
                "displayName": [
                  "u64"
                ],
                "type": 3
              }
            }
          ],
          "docs": [
            "\n        @notice\n        Gets the current overflowed amount in this terminal for a specified project, in terms of ETH.\n\n        @param _projectId The ID of the project to get overflow for.\n\n        @return The current amount of ETH overflow that project has in this terminal, as a fixed point number with 18 decimals.\n      "
          ],
          "mutates": false,
          "name": [
            "currentEthOverflowOf"
          ],
          "payable": false,
          "returnType": {
            "displayName": [
              "u128"
            ],
            "type": 8
          },
          "selector": "0x3957fe1b"
        },
        {
          "args": [
            {
              "name": "_projectId",
              "type": {
                "displayName": [
                  "u64"
                ],
                "type": 3
              }
            }
          ],
          "docs": [
            "\n        @notice\n        The fees that are currently being held to be processed later for each project.\n\n        @param _projectId The ID of the project for which fees are being held.\n\n        @return An array of fees that are being held.\n      "
          ],
          "mutates": false,
          "name": [
            "heldFeesOf"
          ],
          "payable": false,
          "returnType": {
            "displayName": [
              "Vec"
            ],
            "type": 6
          },
          "selector": "0xb73a31a2"
        },
        {
          "args": [
            {
              "name": "_projectId",
              "type": {
                "displayName": [
                  "u64"
                ],
                "type": 3
              }
            },
            {
              "name": "_amount",
              "type": {
                "displayName": [
                  "u128"
                ],
                "type": 8
              }
            },
            {
              "name": "_token",
              "type": {
                "displayName": [
                  "AccountId"
                ],
                "type": 9
              }
            },
            {
              "name": "_beneficiary",
              "type": {
                "displayName": [
                  "AccountId"
                ],
                "type": 9
              }
            },
            {
              "name": "_minReturnedTokens",
              "type": {
                "displayName": [
                  "u128"
                ],
                "type": 8
              }
            },
            {
              "name": "_preferClaimedTokens",
              "type": {
                "displayName": [
                  "bool"
                ],
                "type": 17
              }
            },
            {
              "name": "_memo",
              "type": {
                "displayName": [
                  "String"
                ],
                "type": 18
              }
            },
            {
              "name": "_metadata",
              "type": {
                "displayName": [
                  "String"
                ],
                "type": 18
              }
            }
          ],
          "docs": [
            "\n        @notice\n        Contribute tokens to a project.\n\n        @param _projectId The ID of the project being paid.\n        @param _amount The amount of terminal tokens being received, as a fixed point number with the same amount of decimals as this terminal. If this terminal's token is ETH, this is ignored and msg.value is used in its place.\n        @param _token The token being paid. This terminal ignores this property since it only manages one token.\n        @param _beneficiary The address to mint tokens for and pass along to the funding cycle's data source and delegate.\n        @param _minReturnedTokens The minimum number of project tokens expected in return, as a fixed point number with the same amount of decimals as this terminal.\n        @param _preferClaimedTokens A flag indicating whether the request prefers to mint project tokens into the beneficiaries wallet rather than leaving them unclaimed. This is only possible if the project has an attached token contract. Leaving them unclaimed saves gas.\n        @param _memo A memo to pass along to the emitted event, and passed along the the funding cycle's data source and delegate.  A data source can alter the memo before emitting in the event and forwarding to the delegate.\n        @param _metadata Bytes to send along to the data source, delegate, and emitted event, if provided.\n\n        @return The number of tokens minted for the beneficiary, as a fixed point number with 18 decimals.\n      "
          ],
          "mutates": true,
          "name": [
            "pay"
          ],
          "payable": false,
          "returnType": {
            "displayName": [
              "bool"
            ],
            "type": 17
          },
          "selector": "0xf88ca104"
        },
        {
          "args": [
            {
              "name": "_holder",
              "type": {
                "displayName": [
                  "AccountId"
                ],
                "type": 9
              }
            },
            {
              "name": "_projectId",
              "type": {
                "displayName": [
                  "u64"
                ],
                "type": 3
              }
            },
            {
              "name": "_tokenCount",
              "type": {
                "displayName": [
                  "u128"
                ],
                "type": 8
              }
            },
            {
              "name": "_token",
              "type": {
                "displayName": [
                  "AccountId"
                ],
                "type": 9
              }
            },
            {
              "name": "_minReturnedTokens",
              "type": {
                "displayName": [
                  "u128"
                ],
                "type": 8
              }
            },
            {
              "name": "_beneficiary",
              "type": {
                "displayName": [
                  "AccountId"
                ],
                "type": 9
              }
            },
            {
              "name": "_memo",
              "type": {
                "displayName": [
                  "String"
                ],
                "type": 18
              }
            }
          ],
          "docs": [
            "\n       @notice\n       Holders can redeem their tokens to claim the project's overflowed tokens, or to trigger rules determined by the project's current funding cycle's data source.\n\n       @param _holder The account to redeem tokens for.\n       @param _projectId The ID of the project to which the tokens being redeemed belong.\n       @param _tokenCount The number of project tokens to redeem, as a fixed point number with 18 decimals.\n       @param _token The token being reclaimed. This terminal ignores this property since it only manages one token.\n       @param _minReturnedTokens The minimum amount of terminal tokens expected in return, as a fixed point number with the same amount of decimals as the terminal.\n       @param _beneficiary The address to send the terminal tokens to.\n       @param _memo A memo to pass along to the emitted event.\n       @param _metadata Bytes to send along to the data source, delegate, and emitted event, if provided.\n\n       @return reclaimAmount The amount of terminal tokens that the project tokens were redeemed for, as a fixed point number with 18 decimals.\n     "
          ],
          "mutates": true,
          "name": [
            "redeemTokensOf"
          ],
          "payable": false,
          "returnType": {
            "displayName": [
              "u128"
            ],
            "type": 8
          },
          "selector": "0xd382d5dd"
        },
        {
          "args": [
            {
              "name": "_projectId",
              "type": {
                "displayName": [
                  "u64"
                ],
                "type": 3
              }
            },
            {
              "name": "_amount",
              "type": {
                "displayName": [
                  "u128"
                ],
                "type": 8
              }
            },
            {
              "name": "_currency",
              "type": {
                "displayName": [
                  "u128"
                ],
                "type": 8
              }
            },
            {
              "name": "_token",
              "type": {
                "displayName": [
                  "AccountId"
                ],
                "type": 9
              }
            },
            {
              "name": "_minReturnedTokens",
              "type": {
                "displayName": [
                  "u128"
                ],
                "type": 8
              }
            },
            {
              "name": "_memo",
              "type": {
                "displayName": [
                  "String"
                ],
                "type": 18
              }
            }
          ],
          "docs": [
            "\n        @notice\n        Distributes payouts for a project with the distribution limit of its current funding cycle.\n        @param _projectId The ID of the project having its payouts distributed.\n        @param _amount The amount of terminal tokens to distribute, as a fixed point number with same number of decimals as this terminal.\n        @param _currency The expected currency of the amount being distributed. Must match the project's current funding cycle's distribution limit currency.\n        @param _token The token being distributed. This terminal ignores this property since it only manages one token.\n        @param _minReturnedTokens The minimum number of terminal tokens that the `_amount` should be valued at in terms of this terminal's currency, as a fixed point number with the same number of decimals as this terminal.\n        @param _memo A memo to pass along to the emitted event.\n\n        @return netLeftoverDistributionAmount The amount that was sent to the project owner, as a fixed point number with the same amount of decimals as this terminal.\n      "
          ],
          "mutates": true,
          "name": [
            "distributePayoutsOf"
          ],
          "payable": false,
          "returnType": {
            "displayName": [
              "bool"
            ],
            "type": 17
          },
          "selector": "0xc10be7ef"
        },
        {
          "args": [
            {
              "name": "_projectId",
              "type": {
                "displayName": [
                  "u64"
                ],
                "type": 3
              }
            },
            {
              "name": "_amount",
              "type": {
                "displayName": [
                  "u128"
                ],
                "type": 8
              }
            },
            {
              "name": "_currency",
              "type": {
                "displayName": [
                  "u128"
                ],
                "type": 8
              }
            },
            {
              "name": "_token",
              "type": {
                "displayName": [
                  "AccountId"
                ],
                "type": 9
              }
            },
            {
              "name": "_minReturnedTokens",
              "type": {
                "displayName": [
                  "u128"
                ],
                "type": 8
              }
            },
            {
              "name": "_beneficiary",
              "type": {
                "displayName": [
                  "AccountId"
                ],
                "type": 9
              }
            },
            {
              "name": "_memo",
              "type": {
                "displayName": [
                  "String"
                ],
                "type": 18
              }
            }
          ],
          "docs": [
            "\n        @notice\n        Allows a project to send funds from its overflow up to the preconfigured allowance.\n\n        @param _projectId The ID of the project to use the allowance of.\n        @param _amount The amount of terminal tokens to use from this project's current allowance, as a fixed point number with the same amount of decimals as this terminal.\n        @param _currency The expected currency of the amount being distributed. Must match the project's current funding cycle's overflow allowance currency.\n        @param _token The token being distributed. This terminal ignores this property since it only manages one token.\n        @param _minReturnedTokens The minimum number of tokens that the `_amount` should be valued at in terms of this terminal's currency, as a fixed point number with 18 decimals.\n        @param _beneficiary The address to send the funds to.\n        @param _memo A memo to pass along to the emitted event.\n\n        @return netDistributedAmount The amount of tokens that was distributed to the beneficiary, as a fixed point number with the same amount of decimals as the terminal.\n      "
          ],
          "mutates": true,
          "name": [
            "useAllowanceOf"
          ],
          "payable": false,
          "returnType": {
            "displayName": [
              "bool"
            ],
            "type": 17
          },
          "selector": "0x3fdcb0aa"
        },
        {
          "args": [
            {
              "name": "_projectId",
              "type": {
                "displayName": [
                  "u64"
                ],
                "type": 3
              }
            }
          ],
          "docs": [
            "\n          @notice\n          Get pay records by projects\n          @param _projectId The ID of the project to which the funds received belong.\n        "
          ],
          "mutates": false,
          "name": [
            "getPayRecords"
          ],
          "payable": false,
          "returnType": {
            "displayName": [
              "Vec"
            ],
            "type": 13
          },
          "selector": "0xced3253f"
        },
        {
          "args": [
            {
              "name": "_projectId",
              "type": {
                "displayName": [
                  "u64"
                ],
                "type": 3
              }
            },
            {
              "name": "_amount",
              "type": {
                "displayName": [
                  "u128"
                ],
                "type": 8
              }
            },
            {
              "name": "_token",
              "type": {
                "displayName": [
                  "AccountId"
                ],
                "type": 9
              }
            },
            {
              "name": "_memo",
              "type": {
                "displayName": [
                  "String"
                ],
                "type": 18
              }
            },
            {
              "name": "_metadata",
              "type": {
                "displayName": [
                  "String"
                ],
                "type": 18
              }
            }
          ],
          "docs": [
            "\n        @notice\n        Receives funds belonging to the specified project.\n\n        @param _projectId The ID of the project to which the funds received belong.\n        @param _amount The amount of tokens to add, as a fixed point number with the same number of decimals as this terminal. If this is an ETH terminal, this is ignored and msg.value is used instead.\n        @param _token The token being paid. This terminal ignores this property since it only manages one currency.\n        @param _memo A memo to pass along to the emitted event.\n        @param _metadata Extra data to pass along to the emitted event.\n      "
          ],
          "mutates": true,
          "name": [
            "addToBalanceOf"
          ],
          "payable": false,
          "returnType": {
            "displayName": [
              "bool"
            ],
            "type": 17
          },
          "selector": "0xe9689b28"
        }
      ]
    },
    "storage": {
      "struct": {
        "fields": [
          {
            "layout": {
              "struct": {
                "fields": [
                  {
                    "layout": {
                      "struct": {
                        "fields": [
                          {
                            "layout": {
                              "cell": {
                                "key": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                "ty": 0
                              }
                            },
                            "name": "header"
                          },
                          {
                            "layout": {
                              "struct": {
                                "fields": [
                                  {
                                    "layout": {
                                      "cell": {
                                        "key": "0x0100000000000000000000000000000000000000000000000000000000000000",
                                        "ty": 1
                                      }
                                    },
                                    "name": "len"
                                  },
                                  {
                                    "layout": {
                                      "array": {
                                        "cellsPerElem": 1,
                                        "layout": {
                                          "cell": {
                                            "key": "0x0100000001000000000000000000000000000000000000000000000000000000",
                                            "ty": 2
                                          }
                                        },
                                        "len": 4294967295,
                                        "offset": "0x0200000000000000000000000000000000000000000000000000000000000000"
                                      }
                                    },
                                    "name": "elems"
                                  }
                                ]
                              }
                            },
                            "name": "entries"
                          }
                        ]
                      }
                    },
                    "name": "keys"
                  },
                  {
                    "layout": {
                      "hash": {
                        "layout": {
                          "cell": {
                            "key": "0x0200000001000000000000000000000000000000000000000000000000000000",
                            "ty": 5
                          }
                        },
                        "offset": "0x0100000001000000000000000000000000000000000000000000000000000000",
                        "strategy": {
                          "hasher": "Blake2x256",
                          "postfix": "",
                          "prefix": "0x696e6b20686173686d6170"
                        }
                      }
                    },
                    "name": "values"
                  }
                ]
              }
            },
            "name": "_heldFeesOf"
          },
          {
            "layout": {
              "struct": {
                "fields": [
                  {
                    "layout": {
                      "struct": {
                        "fields": [
                          {
                            "layout": {
                              "cell": {
                                "key": "0x0200000001000000000000000000000000000000000000000000000000000000",
                                "ty": 0
                              }
                            },
                            "name": "header"
                          },
                          {
                            "layout": {
                              "struct": {
                                "fields": [
                                  {
                                    "layout": {
                                      "cell": {
                                        "key": "0x0300000001000000000000000000000000000000000000000000000000000000",
                                        "ty": 1
                                      }
                                    },
                                    "name": "len"
                                  },
                                  {
                                    "layout": {
                                      "array": {
                                        "cellsPerElem": 1,
                                        "layout": {
                                          "cell": {
                                            "key": "0x0300000002000000000000000000000000000000000000000000000000000000",
                                            "ty": 2
                                          }
                                        },
                                        "len": 4294967295,
                                        "offset": "0x0400000001000000000000000000000000000000000000000000000000000000"
                                      }
                                    },
                                    "name": "elems"
                                  }
                                ]
                              }
                            },
                            "name": "entries"
                          }
                        ]
                      }
                    },
                    "name": "keys"
                  },
                  {
                    "layout": {
                      "hash": {
                        "layout": {
                          "cell": {
                            "key": "0x0400000002000000000000000000000000000000000000000000000000000000",
                            "ty": 12
                          }
                        },
                        "offset": "0x0300000002000000000000000000000000000000000000000000000000000000",
                        "strategy": {
                          "hasher": "Blake2x256",
                          "postfix": "",
                          "prefix": "0x696e6b20686173686d6170"
                        }
                      }
                    },
                    "name": "values"
                  }
                ]
              }
            },
            "name": "payRecords"
          },
          {
            "layout": {
              "struct": {
                "fields": [
                  {
                    "layout": {
                      "struct": {
                        "fields": [
                          {
                            "layout": {
                              "cell": {
                                "key": "0x0400000002000000000000000000000000000000000000000000000000000000",
                                "ty": 0
                              }
                            },
                            "name": "header"
                          },
                          {
                            "layout": {
                              "struct": {
                                "fields": [
                                  {
                                    "layout": {
                                      "cell": {
                                        "key": "0x0500000002000000000000000000000000000000000000000000000000000000",
                                        "ty": 1
                                      }
                                    },
                                    "name": "len"
                                  },
                                  {
                                    "layout": {
                                      "array": {
                                        "cellsPerElem": 1,
                                        "layout": {
                                          "cell": {
                                            "key": "0x0500000003000000000000000000000000000000000000000000000000000000",
                                            "ty": 15
                                          }
                                        },
                                        "len": 4294967295,
                                        "offset": "0x0600000002000000000000000000000000000000000000000000000000000000"
                                      }
                                    },
                                    "name": "elems"
                                  }
                                ]
                              }
                            },
                            "name": "entries"
                          }
                        ]
                      }
                    },
                    "name": "keys"
                  },
                  {
                    "layout": {
                      "hash": {
                        "layout": {
                          "cell": {
                            "key": "0x0600000003000000000000000000000000000000000000000000000000000000",
                            "ty": 16
                          }
                        },
                        "offset": "0x0500000003000000000000000000000000000000000000000000000000000000",
                        "strategy": {
                          "hasher": "Blake2x256",
                          "postfix": "",
                          "prefix": "0x696e6b20686173686d6170"
                        }
                      }
                    },
                    "name": "values"
                  }
                ]
              }
            },
            "name": "isFeelessAddress"
          },
          {
            "layout": {
              "cell": {
                "key": "0x0600000003000000000000000000000000000000000000000000000000000000",
                "ty": 9
              }
            },
            "name": "projects"
          },
          {
            "layout": {
              "cell": {
                "key": "0x0700000003000000000000000000000000000000000000000000000000000000",
                "ty": 9
              }
            },
            "name": "directory"
          },
          {
            "layout": {
              "cell": {
                "key": "0x0800000003000000000000000000000000000000000000000000000000000000",
                "ty": 9
              }
            },
            "name": "splitsStore"
          },
          {
            "layout": {
              "cell": {
                "key": "0x0900000003000000000000000000000000000000000000000000000000000000",
                "ty": 9
              }
            },
            "name": "prices"
          },
          {
            "layout": {
              "cell": {
                "key": "0x0a00000003000000000000000000000000000000000000000000000000000000",
                "ty": 9
              }
            },
            "name": "store"
          },
          {
            "layout": {
              "cell": {
                "key": "0x0b00000003000000000000000000000000000000000000000000000000000000",
                "ty": 9
              }
            },
            "name": "feeGauge"
          },
          {
            "layout": {
              "cell": {
                "key": "0x0c00000003000000000000000000000000000000000000000000000000000000",
                "ty": 9
              }
            },
            "name": "token"
          },
          {
            "layout": {
              "cell": {
                "key": "0x0d00000003000000000000000000000000000000000000000000000000000000",
                "ty": 3
              }
            },
            "name": "baseWeightCurrency"
          },
          {
            "layout": {
              "cell": {
                "key": "0x0e00000003000000000000000000000000000000000000000000000000000000",
                "ty": 8
              }
            },
            "name": "payoutSplitsGroup"
          },
          {
            "layout": {
              "cell": {
                "key": "0x0f00000003000000000000000000000000000000000000000000000000000000",
                "ty": 8
              }
            },
            "name": "decimals"
          },
          {
            "layout": {
              "cell": {
                "key": "0x1000000003000000000000000000000000000000000000000000000000000000",
                "ty": 8
              }
            },
            "name": "currency"
          }
        ]
      }
    },
    "types": [
      {
        "id": 0,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "name": "last_vacant",
                  "type": 1,
                  "typeName": "Index"
                },
                {
                  "name": "len",
                  "type": 1,
                  "typeName": "u32"
                },
                {
                  "name": "len_entries",
                  "type": 1,
                  "typeName": "u32"
                }
              ]
            }
          },
          "path": [
            "ink_storage",
            "collections",
            "stash",
            "Header"
          ]
        }
      },
      {
        "id": 1,
        "type": {
          "def": {
            "primitive": "u32"
          }
        }
      },
      {
        "id": 2,
        "type": {
          "def": {
            "variant": {
              "variants": [
                {
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "VacantEntry"
                    }
                  ],
                  "index": 0,
                  "name": "Vacant"
                },
                {
                  "fields": [
                    {
                      "type": 3,
                      "typeName": "T"
                    }
                  ],
                  "index": 1,
                  "name": "Occupied"
                }
              ]
            }
          },
          "params": [
            {
              "name": "T",
              "type": 3
            }
          ],
          "path": [
            "ink_storage",
            "collections",
            "stash",
            "Entry"
          ]
        }
      },
      {
        "id": 3,
        "type": {
          "def": {
            "primitive": "u64"
          }
        }
      },
      {
        "id": 4,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "name": "next",
                  "type": 1,
                  "typeName": "Index"
                },
                {
                  "name": "prev",
                  "type": 1,
                  "typeName": "Index"
                }
              ]
            }
          },
          "path": [
            "ink_storage",
            "collections",
            "stash",
            "VacantEntry"
          ]
        }
      },
      {
        "id": 5,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "name": "value",
                  "type": 6,
                  "typeName": "V"
                },
                {
                  "name": "key_index",
                  "type": 1,
                  "typeName": "KeyIndex"
                }
              ]
            }
          },
          "params": [
            {
              "name": "V",
              "type": 6
            }
          ],
          "path": [
            "ink_storage",
            "collections",
            "hashmap",
            "ValueEntry"
          ]
        }
      },
      {
        "id": 6,
        "type": {
          "def": {
            "sequence": {
              "type": 7
            }
          }
        }
      },
      {
        "id": 7,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "name": "amount",
                  "type": 8,
                  "typeName": "u128"
                },
                {
                  "name": "fee",
                  "type": 3,
                  "typeName": "u64"
                },
                {
                  "name": "feeDiscount",
                  "type": 3,
                  "typeName": "u64"
                },
                {
                  "name": "beneficiary",
                  "type": 9,
                  "typeName": "AccountId"
                }
              ]
            }
          },
          "path": [
            "MBERC20PaymentTerminal",
            "MBERC20PaymentTerminal",
            "MBFee"
          ]
        }
      },
      {
        "id": 8,
        "type": {
          "def": {
            "primitive": "u128"
          }
        }
      },
      {
        "id": 9,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "type": 10,
                  "typeName": "[u8; 32]"
                }
              ]
            }
          },
          "path": [
            "ink_env",
            "types",
            "AccountId"
          ]
        }
      },
      {
        "id": 10,
        "type": {
          "def": {
            "array": {
              "len": 32,
              "type": 11
            }
          }
        }
      },
      {
        "id": 11,
        "type": {
          "def": {
            "primitive": "u8"
          }
        }
      },
      {
        "id": 12,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "name": "value",
                  "type": 13,
                  "typeName": "V"
                },
                {
                  "name": "key_index",
                  "type": 1,
                  "typeName": "KeyIndex"
                }
              ]
            }
          },
          "params": [
            {
              "name": "V",
              "type": 13
            }
          ],
          "path": [
            "ink_storage",
            "collections",
            "hashmap",
            "ValueEntry"
          ]
        }
      },
      {
        "id": 13,
        "type": {
          "def": {
            "sequence": {
              "type": 14
            }
          }
        }
      },
      {
        "id": 14,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "name": "value",
                  "type": 8,
                  "typeName": "u128"
                },
                {
                  "name": "payer",
                  "type": 9,
                  "typeName": "AccountId"
                },
                {
                  "name": "time",
                  "type": 3,
                  "typeName": "u64"
                }
              ]
            }
          },
          "path": [
            "MBERC20PaymentTerminal",
            "MBERC20PaymentTerminal",
            "MBPayRecord"
          ]
        }
      },
      {
        "id": 15,
        "type": {
          "def": {
            "variant": {
              "variants": [
                {
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "VacantEntry"
                    }
                  ],
                  "index": 0,
                  "name": "Vacant"
                },
                {
                  "fields": [
                    {
                      "type": 9,
                      "typeName": "T"
                    }
                  ],
                  "index": 1,
                  "name": "Occupied"
                }
              ]
            }
          },
          "params": [
            {
              "name": "T",
              "type": 9
            }
          ],
          "path": [
            "ink_storage",
            "collections",
            "stash",
            "Entry"
          ]
        }
      },
      {
        "id": 16,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "name": "value",
                  "type": 17,
                  "typeName": "V"
                },
                {
                  "name": "key_index",
                  "type": 1,
                  "typeName": "KeyIndex"
                }
              ]
            }
          },
          "params": [
            {
              "name": "V",
              "type": 17
            }
          ],
          "path": [
            "ink_storage",
            "collections",
            "hashmap",
            "ValueEntry"
          ]
        }
      },
      {
        "id": 17,
        "type": {
          "def": {
            "primitive": "bool"
          }
        }
      },
      {
        "id": 18,
        "type": {
          "def": {
            "primitive": "str"
          }
        }
      }
    ]
  }
}
